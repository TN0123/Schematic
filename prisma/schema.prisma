generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                  @id @default(cuid())
  name                     String?
  email                    String?                 @unique
  emailVerified            DateTime?
  image                    String?
  hasCompletedScheduleTour Boolean                 @default(false)
  hasCompletedWriteTour    Boolean                 @default(false)
  premiumRemainingUses     Int                     @default(10)
  accounts                 Account[]
  bulletins                Bulletin[]
  events                   Event[]
  goals                    Goal[]
  sessions                 Session[]
  documents                Document[]
  reminders                Reminder[]
  scheduleContext          String                  @default("")
  goalText                 String                  @default("")
  dailySummaryCaches       DailySummaryCache[]
  /// Timestamp of the user's last successful login
  lastLoginAt              DateTime?
  /// Timestamp when the user last dismissed the product updates modal
  lastSeenUpdatesAt        DateTime?
  DailySuggestionsCache    DailySuggestionsCache[]
  createdAt                DateTime               @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id     String   @id @default(cuid())
  title  String
  start  DateTime
  end    DateTime
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  links  String[] @default([])
}

model Bulletin {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      String   @default("text")
  data      Json?
  schema    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id        String   @id @default(cuid())
  title     String
  type      GoalType @default(DAILY)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  context   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Reminder {
  id            String   @id @default(cuid())
  text          String
  time          DateTime
  isAISuggested Boolean  @default(false)
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum GoalType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

/// Cache of generated daily summaries by user, timezone, and local day
model DailySummaryCache {
  id         String   @id @default(cuid())
  userId     String
  timezone   String
  dayKey     String /// e.g. "2025-06-30" in user's timezone
  eventsHash String
  summary    String   @db.Text
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, timezone, dayKey])
  @@index([userId])
}

/// Changelog entries for informing users about new features
model ProductUpdate {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  publishedAt DateTime @default(now())
  isPublished Boolean  @default(true)

  @@index([publishedAt])
  @@index([isPublished])
}

/// Cache of generated daily suggestions (events + reminders) by user, timezone, and local day
model DailySuggestionsCache {
  id         String   @id @default(cuid())
  userId     String
  timezone   String
  dayKey     String /// e.g. "2025-06-30" in user's timezone
  eventsHash String
  payload    String   @db.Text /// JSON string with { events: [], reminders: [] }
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, timezone, dayKey])
  @@index([userId])
}
